# -*- coding: utf-8 -*-
"""Untitled39.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rAyyi8YviRFLqXhT9qegVp0J9WnBhBLH
"""

#multiple inheritance

class Father:
  def height(self):
    print('Height is 6.0 foot')

class Mother:
  def color(self):
    print('Color is Brown')


class Child(Father, Mother):
  pass


c=Child()
print('Inherited qualities')
c.height()
c.color()



#single inheritance
class Bank(object):
  cash=100000

  #def available_cash(cls):
  #  print(cls.cash)  
  print(cash)

class AXIS(Bank):
  pass



class SBI(Bank):
  cash=50000
  @classmethod
  def available_cash(cls):
    print(cls.cash + Bank.cash)  


a=AXIS()
a.available_cash()


s=SBI()
s.available_cash()
print('----------------------------')
Bank.available_cash()

class Bank(object):
  cash=100000

  #def available_cash(cls):
  #  print(cls.cash)  
  print(cash)

class AXIS(Bank):
  pass


a=AXIS()
print(a.cash)

class A (object):
  def __init__(self):
    self.a='a'
    print(self.a)
    super().__init__()


class B(object):
  def __init__(self):
    self.b='b'
    print(self.b)
    super().__init__()


class C(A, B):
  def __init__(self):
    self.c='c'
    print(self.c) 
    super().__init__()



o=C()    
print(C.mro())

class P(object):
  def method(self):
    print('P class method')
    super().method()


class Q(object):
  def method(self):
    print('Q class method')
    super().method() 


class V(object):
  def method(self):
    print('V class method')
    super().method()

class S(P,Q):
  def method(self):
    print('S class method')
    super().method()

class Y(Q,V):
  def method(self):
    print('Y class method')
    super().method() 

class Z(S,Y):
  def method(self):
    print ('Z class method')
    super().method()



z=Z()
z.method()